name: Build Flet Android APK (Simple)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android build tools
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;33.0.0"

    - name: Install Flet and dependencies
      run: |
        pip install --upgrade pip
        pip install "flet[build-tools]==0.28.3"
        
        # Install your app dependencies if you have them
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: Verify setup
      run: |
        echo "=== Verifying Python and Flet ==="
        python --version
        pip show flet
        
        echo "=== Verifying Android SDK ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        ls -la $ANDROID_HOME/
        
        echo "=== Verifying project files ==="
        ls -la
        if [ ! -f "main.py" ]; then
          echo "❌ main.py not found!"
          exit 1
        fi
        
        echo "=== Testing Flet import ==="
        python -c "import flet; print('✓ Flet imported successfully')"

    - name: Build APK
      run: |
        echo "=== Starting Flet build ==="
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # Run build with timeout and error handling
        timeout 30m flet build apk --verbose || {
          echo "❌ Build failed or timed out"
          echo "=== Checking for partial build artifacts ==="
          find . -name "*.apk" -o -name "*.aab" | head -10
          exit 1
        }
        
        echo "=== Build completed, checking output ==="
        
        # Check for APK files in common locations
        if [ -d "build/apk" ]; then
          echo "✓ Found build/apk directory"
          ls -la build/apk/
          
          if ls build/apk/*.apk 1> /dev/null 2>&1; then
            echo "✓ APK files found in build/apk/!"
            ls -lh build/apk/*.apk
          fi
        fi
        
        if [ -d "dist" ]; then
          echo "✓ Found dist directory"
          ls -la dist/
          
          if ls dist/*.apk 1> /dev/null 2>&1; then
            echo "✓ APK files found in dist/!"
            ls -lh dist/*.apk
          fi
        fi
        
        # Look for APK files anywhere
        echo "=== Searching for all APK files ==="
        find . -name "*.apk" -type f | while read apk; do
          echo "Found APK: $apk"
          ls -lh "$apk"
        done
        
        # Verify we have at least one APK
        if ! find . -name "*.apk" -type f | grep -q .; then
          echo "❌ No APK files found anywhere!"
          exit 1
        else
          echo "✓ APK files found successfully!"
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ExpenseTracker-APK
        path: |
          build/apk/*.apk
          dist/*.apk
          **/*.apk
        if-no-files-found: warn
        retention-days: 30

    - name: Upload debug info on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: debug-logs
        path: |
          .flet/
          *.log
        if-no-files-found: ignore
        retention-days: 7